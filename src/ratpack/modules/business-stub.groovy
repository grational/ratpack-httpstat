/*
 * This ratpack file was auto generated by 'gigawatt'
 * @author d7392
 * @date 15-05-2019 15.32
 */
// external
import static ratpack.groovy.Groovy.ratpack
import ratpack.handling.RequestId
import ratpack.http.Request
import ratpack.exec.Blocking
import groovy.json.JsonBuilder
import it.italiaonline.rnd.time.TimeLapse
// internal
import it.italiaonline.rnd.ratpack.response.Meta
import it.italiaonline.rnd.ratpack.exceptions.Error
import it.italiaonline.rnd.ratpack.exceptions.MetaException
import it.italiaonline.rnd.http.Code

ratpack {
	handlers {
		prefix('v1') {
			get('httpstat/:code') {
				// request ids
				def requestData = [
					id:   get(RequestId).toString(),
					path: get(Request).path,
					qp:   request.queryParams
				]
				// build the json meta section
				def meta = new Meta (
					uuid:    requestData.id,
					path:    requestData.path,
					qparams: requestData.qp,
					body:    [:]
				)
				def code, time
				// path params
				try { code = new Code(pathTokens.code) }
					catch (e) {
						println e.message
						throw new MetaException(Error.INVALID_CODE, meta) 
					}
				// query params
				try { time = requestData.qp.sleep }
					catch (e) { throw new MetaException(Error.INVALID_TIME, meta) }

				Blocking.get {
					println "[HTTPSTAT] Emulating a http request with return code ${code.number()} to sleep for ${time}"
					sleep(new TimeLapse(time).ms() as long)
				}
				.then {
					response.status(code.number())
					response.send (
						'application/json',
						new JsonBuilder(
							meta.map() + [
								data: [
									http: [
										response: [
											code: code.number(),
											description: code.description(),
											time: time
										]
									]
								]
							]
						).toString()
					) // response.send
				} // then
			} // get('httpstat/:code')

		}
	}
}
